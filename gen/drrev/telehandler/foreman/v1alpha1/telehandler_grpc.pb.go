// TODO: Follow Google AIP standards:
// - Add resource types: https://google.aip.dev/123.
// - Add google.api.FieldBehavior annotations to fields: https://google.aip.dev/203.
// - Add http annotations: https://google.aip.dev/127.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: drrev/telehandler/foreman/v1alpha1/telehandler.proto

package foremanpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ForemanService_StartJob_FullMethodName       = "/drrev.telehandler.foreman.v1alpha1.ForemanService/StartJob"
	ForemanService_StopJob_FullMethodName        = "/drrev.telehandler.foreman.v1alpha1.ForemanService/StopJob"
	ForemanService_GetJobStatus_FullMethodName   = "/drrev.telehandler.foreman.v1alpha1.ForemanService/GetJobStatus"
	ForemanService_WatchJobOutput_FullMethodName = "/drrev.telehandler.foreman.v1alpha1.ForemanService/WatchJobOutput"
)

// ForemanServiceClient is the client API for ForemanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Foreman service manages all jobs within the system.
// This service is used to start, stop, query status, and get the output of a job.
type ForemanServiceClient interface {
	// Starts a job under the given parent resource.
	//
	// If the operation failed, the following well-defined gRPC status codes are returned:
	//   - PERMISSION_DENIED: The requesting user does not have permission to start a new job.
	//   - FAILED_PRECONDITION: Execution of the command was attempted, but the command failed to start.
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	// Stops a job.
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves the current status of a given Job.
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*JobStatus, error)
	// Watches the output for a given job. This method does not support cursors or pagination.
	// Each new request to WatchJob will return **all** events since the start of the process.
	// At this time, only log events are supported.
	WatchJobOutput(ctx context.Context, in *WatchJobOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JobOutput], error)
}

type foremanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForemanServiceClient(cc grpc.ClientConnInterface) ForemanServiceClient {
	return &foremanServiceClient{cc}
}

func (c *foremanServiceClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, ForemanService_StartJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServiceClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ForemanService_StopJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServiceClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*JobStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, ForemanService_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServiceClient) WatchJobOutput(ctx context.Context, in *WatchJobOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JobOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ForemanService_ServiceDesc.Streams[0], ForemanService_WatchJobOutput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchJobOutputRequest, JobOutput]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ForemanService_WatchJobOutputClient = grpc.ServerStreamingClient[JobOutput]

// ForemanServiceServer is the server API for ForemanService service.
// All implementations should embed UnimplementedForemanServiceServer
// for forward compatibility.
//
// The Foreman service manages all jobs within the system.
// This service is used to start, stop, query status, and get the output of a job.
type ForemanServiceServer interface {
	// Starts a job under the given parent resource.
	//
	// If the operation failed, the following well-defined gRPC status codes are returned:
	//   - PERMISSION_DENIED: The requesting user does not have permission to start a new job.
	//   - FAILED_PRECONDITION: Execution of the command was attempted, but the command failed to start.
	StartJob(context.Context, *StartJobRequest) (*JobResponse, error)
	// Stops a job.
	StopJob(context.Context, *StopJobRequest) (*emptypb.Empty, error)
	// Retrieves the current status of a given Job.
	GetJobStatus(context.Context, *GetJobStatusRequest) (*JobStatus, error)
	// Watches the output for a given job. This method does not support cursors or pagination.
	// Each new request to WatchJob will return **all** events since the start of the process.
	// At this time, only log events are supported.
	WatchJobOutput(*WatchJobOutputRequest, grpc.ServerStreamingServer[JobOutput]) error
}

// UnimplementedForemanServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedForemanServiceServer struct{}

func (UnimplementedForemanServiceServer) StartJob(context.Context, *StartJobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedForemanServiceServer) StopJob(context.Context, *StopJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (UnimplementedForemanServiceServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedForemanServiceServer) WatchJobOutput(*WatchJobOutputRequest, grpc.ServerStreamingServer[JobOutput]) error {
	return status.Errorf(codes.Unimplemented, "method WatchJobOutput not implemented")
}
func (UnimplementedForemanServiceServer) testEmbeddedByValue() {}

// UnsafeForemanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForemanServiceServer will
// result in compilation errors.
type UnsafeForemanServiceServer interface {
	mustEmbedUnimplementedForemanServiceServer()
}

func RegisterForemanServiceServer(s grpc.ServiceRegistrar, srv ForemanServiceServer) {
	// If the following call pancis, it indicates UnimplementedForemanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ForemanService_ServiceDesc, srv)
}

func _ForemanService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForemanService_StartJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServiceServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForemanService_StopJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServiceServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForemanService_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServiceServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanService_WatchJobOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchJobOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForemanServiceServer).WatchJobOutput(m, &grpc.GenericServerStream[WatchJobOutputRequest, JobOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ForemanService_WatchJobOutputServer = grpc.ServerStreamingServer[JobOutput]

// ForemanService_ServiceDesc is the grpc.ServiceDesc for ForemanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForemanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drrev.telehandler.foreman.v1alpha1.ForemanService",
	HandlerType: (*ForemanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _ForemanService_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _ForemanService_StopJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _ForemanService_GetJobStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchJobOutput",
			Handler:       _ForemanService_WatchJobOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "drrev/telehandler/foreman/v1alpha1/telehandler.proto",
}
