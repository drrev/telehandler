// TODO: Follow Google AIP standards:
// - Add resource types: https://google.aip.dev/123.
// - Add google.api.FieldBehavior annotations to fields: https://google.aip.dev/203.
// - Add http annotations: https://google.aip.dev/127.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: drrev/telehandler/foreman/v1alpha1/telehandler.proto

package foremanpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The current state of a Job in the execution lifecycle.
type JobState int32

const (
	// The state of the job is not specified.
	JobState_JOB_STATE_UNSPECIFIED JobState = 0
	// The job is currently running and active.
	JobState_JOB_STATE_RUNNING JobState = 1
	// The job failed during execution.
	// If a job is in this state, request the job output with TailJobOutput to discern the cause of failure.
	JobState_JOB_STATE_FAILED JobState = 2
	// The job ran to completion and exited successfully.
	// When in this state, job output can still be requested via TailJobOutput.
	JobState_JOB_STATE_COMPLETED JobState = 3
	// The job was stopped by a user before completing execution.
	JobState_JOB_STATE_STOPPED JobState = 4
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "JOB_STATE_UNSPECIFIED",
		1: "JOB_STATE_RUNNING",
		2: "JOB_STATE_FAILED",
		3: "JOB_STATE_COMPLETED",
		4: "JOB_STATE_STOPPED",
	}
	JobState_value = map[string]int32{
		"JOB_STATE_UNSPECIFIED": 0,
		"JOB_STATE_RUNNING":     1,
		"JOB_STATE_FAILED":      2,
		"JOB_STATE_COMPLETED":   3,
		"JOB_STATE_STOPPED":     4,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_enumTypes[0].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_enumTypes[0]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescGZIP(), []int{0}
}

// A request to start a new Linux process.
type StartJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The Linux command to run on the target system.
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Optional. Arguments to pass to the command.
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *StartJobRequest) Reset() {
	*x = StartJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobRequest) ProtoMessage() {}

func (x *StartJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobRequest.ProtoReflect.Descriptor instead.
func (*StartJobRequest) Descriptor() ([]byte, []int) {
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescGZIP(), []int{0}
}

func (x *StartJobRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *StartJobRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

// A request to stop a Job.
type StopJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The UUIDv4 of the job to stop.
	//
	// Example: 2259116c-578e-413c-93bd-d6855dfcb941
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopJobRequest) Reset() {
	*x = StopJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobRequest) ProtoMessage() {}

func (x *StopJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobRequest.ProtoReflect.Descriptor instead.
func (*StopJobRequest) Descriptor() ([]byte, []int) {
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescGZIP(), []int{1}
}

func (x *StopJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A request to resolve the latest status of the job,
// including the current state and resource utilization.
type GetJobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The UUIDv4 of the job to stop.
	//
	// Example: 2259116c-578e-413c-93bd-d6855dfcb941
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetJobStatusRequest) Reset() {
	*x = GetJobStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStatusRequest) ProtoMessage() {}

func (x *GetJobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStatusRequest.ProtoReflect.Descriptor instead.
func (*GetJobStatusRequest) Descriptor() ([]byte, []int) {
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescGZIP(), []int{2}
}

func (x *GetJobStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A request to watch streaming output from a target job.
type WatchJobOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The UUIDv4 of the job to stop.
	//
	// Example: 2259116c-578e-413c-93bd-d6855dfcb941
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WatchJobOutputRequest) Reset() {
	*x = WatchJobOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchJobOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchJobOutputRequest) ProtoMessage() {}

func (x *WatchJobOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchJobOutputRequest.ProtoReflect.Descriptor instead.
func (*WatchJobOutputRequest) Descriptor() ([]byte, []int) {
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescGZIP(), []int{3}
}

func (x *WatchJobOutputRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A JobOutput reprents a single line of output from a given job.
//
// All lines from STDOUT and STDERR are multiplexed into a single stream.
type JobOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. A data block output from the process.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JobOutput) Reset() {
	*x = JobOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobOutput) ProtoMessage() {}

func (x *JobOutput) ProtoReflect() protoreflect.Message {
	mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobOutput.ProtoReflect.Descriptor instead.
func (*JobOutput) Descriptor() ([]byte, []int) {
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescGZIP(), []int{4}
}

func (x *JobOutput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// The full context of a Linux process execution.
type JobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. A system-assigned UUIDv4 unique identifier for this Job.
	//
	// Example: 2259116c-578e-413c-93bd-d6855dfcb941
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The current state of the job.
	State JobState `protobuf:"varint,2,opt,name=state,proto3,enum=drrev.telehandler.foreman.v1alpha1.JobState" json:"state,omitempty"`
}

func (x *JobResponse) Reset() {
	*x = JobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResponse) ProtoMessage() {}

func (x *JobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResponse.ProtoReflect.Descriptor instead.
func (*JobResponse) Descriptor() ([]byte, []int) {
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescGZIP(), []int{5}
}

func (x *JobResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobResponse) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_JOB_STATE_UNSPECIFIED
}

// The current status of a given job.
type JobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. A system-assigned UUIDv4 unique identifier for the Job.
	//
	// Example: 2259116c-578e-413c-93bd-d6855dfcb941
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The current state of the job.
	State JobState `protobuf:"varint,2,opt,name=state,proto3,enum=drrev.telehandler.foreman.v1alpha1.JobState" json:"state,omitempty"`
	// Output only. The job start time. This is the same as created time.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Output only. The time at which a job stopped running.
	// Valid only if state != JOB_STATE_RUNNING.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. Exit code of the underlying process.
	// Valid only if state != JOB_STATE_RUNNING.
	ExitCode int32 `protobuf:"varint,5,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescGZIP(), []int{6}
}

func (x *JobStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobStatus) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_JOB_STATE_UNSPECIFIED
}

func (x *JobStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *JobStatus) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *JobStatus) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

var File_drrev_telehandler_foreman_v1alpha1_telehandler_proto protoreflect.FileDescriptor

var file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDesc = []byte{
	0x0a, 0x34, 0x64, 0x72, 0x72, 0x65, 0x76, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x64, 0x72, 0x72, 0x65, 0x76, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x53, 0x74, 0x6f,
	0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x09, 0x4a,
	0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x0b,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x64, 0x72, 0x72,
	0x65, 0x76, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x66,
	0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xee, 0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x64,
	0x72, 0x72, 0x65, 0x76, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x2e, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x2a, 0x82, 0x01, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x42, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x04, 0x32, 0xd7, 0x03, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4a, 0x6f, 0x62, 0x12, 0x33, 0x2e, 0x64, 0x72, 0x72, 0x65, 0x76, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x72, 0x72, 0x65,
	0x76, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x66, 0x6f,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x07,
	0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x2e, 0x64, 0x72, 0x72, 0x65, 0x76, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x2e, 0x64, 0x72, 0x72, 0x65, 0x76, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x64, 0x72, 0x72, 0x65, 0x76, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x7e, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x39, 0x2e, 0x64, 0x72, 0x72, 0x65, 0x76, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64,
	0x72, 0x72, 0x65, 0x76, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x2e, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42,
	0xb4, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x72, 0x72, 0x65, 0x76, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x10, 0x54, 0x65, 0x6c, 0x65,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x72, 0x72, 0x65, 0x76,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x64, 0x72, 0x72, 0x65, 0x76, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x70, 0x62, 0xa2, 0x02, 0x03,
	0x44, 0x54, 0x46, 0xaa, 0x02, 0x22, 0x44, 0x72, 0x72, 0x65, 0x76, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x2e,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x22, 0x44, 0x72, 0x72, 0x65, 0x76,
	0x5c, 0x54, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5c, 0x46, 0x6f, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2e,
	0x44, 0x72, 0x72, 0x65, 0x76, 0x5c, 0x54, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x5c, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x25, 0x44, 0x72, 0x72, 0x65, 0x76, 0x3a, 0x3a, 0x54, 0x65, 0x6c, 0x65, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x3a, 0x3a, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescOnce sync.Once
	file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescData = file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDesc
)

func file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescGZIP() []byte {
	file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescOnce.Do(func() {
		file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescData = protoimpl.X.CompressGZIP(file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescData)
	})
	return file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDescData
}

var file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_goTypes = []any{
	(JobState)(0),                 // 0: drrev.telehandler.foreman.v1alpha1.JobState
	(*StartJobRequest)(nil),       // 1: drrev.telehandler.foreman.v1alpha1.StartJobRequest
	(*StopJobRequest)(nil),        // 2: drrev.telehandler.foreman.v1alpha1.StopJobRequest
	(*GetJobStatusRequest)(nil),   // 3: drrev.telehandler.foreman.v1alpha1.GetJobStatusRequest
	(*WatchJobOutputRequest)(nil), // 4: drrev.telehandler.foreman.v1alpha1.WatchJobOutputRequest
	(*JobOutput)(nil),             // 5: drrev.telehandler.foreman.v1alpha1.JobOutput
	(*JobResponse)(nil),           // 6: drrev.telehandler.foreman.v1alpha1.JobResponse
	(*JobStatus)(nil),             // 7: drrev.telehandler.foreman.v1alpha1.JobStatus
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 9: google.protobuf.Empty
}
var file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_depIdxs = []int32{
	0, // 0: drrev.telehandler.foreman.v1alpha1.JobResponse.state:type_name -> drrev.telehandler.foreman.v1alpha1.JobState
	0, // 1: drrev.telehandler.foreman.v1alpha1.JobStatus.state:type_name -> drrev.telehandler.foreman.v1alpha1.JobState
	8, // 2: drrev.telehandler.foreman.v1alpha1.JobStatus.start_time:type_name -> google.protobuf.Timestamp
	8, // 3: drrev.telehandler.foreman.v1alpha1.JobStatus.end_time:type_name -> google.protobuf.Timestamp
	1, // 4: drrev.telehandler.foreman.v1alpha1.ForemanService.StartJob:input_type -> drrev.telehandler.foreman.v1alpha1.StartJobRequest
	2, // 5: drrev.telehandler.foreman.v1alpha1.ForemanService.StopJob:input_type -> drrev.telehandler.foreman.v1alpha1.StopJobRequest
	3, // 6: drrev.telehandler.foreman.v1alpha1.ForemanService.GetJobStatus:input_type -> drrev.telehandler.foreman.v1alpha1.GetJobStatusRequest
	4, // 7: drrev.telehandler.foreman.v1alpha1.ForemanService.WatchJobOutput:input_type -> drrev.telehandler.foreman.v1alpha1.WatchJobOutputRequest
	6, // 8: drrev.telehandler.foreman.v1alpha1.ForemanService.StartJob:output_type -> drrev.telehandler.foreman.v1alpha1.JobResponse
	9, // 9: drrev.telehandler.foreman.v1alpha1.ForemanService.StopJob:output_type -> google.protobuf.Empty
	7, // 10: drrev.telehandler.foreman.v1alpha1.ForemanService.GetJobStatus:output_type -> drrev.telehandler.foreman.v1alpha1.JobStatus
	5, // 11: drrev.telehandler.foreman.v1alpha1.ForemanService.WatchJobOutput:output_type -> drrev.telehandler.foreman.v1alpha1.JobOutput
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_init() }
func file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_init() {
	if File_drrev_telehandler_foreman_v1alpha1_telehandler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StartJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StopJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetJobStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*WatchJobOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*JobOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*JobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*JobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_goTypes,
		DependencyIndexes: file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_depIdxs,
		EnumInfos:         file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_enumTypes,
		MessageInfos:      file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_msgTypes,
	}.Build()
	File_drrev_telehandler_foreman_v1alpha1_telehandler_proto = out.File
	file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_rawDesc = nil
	file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_goTypes = nil
	file_drrev_telehandler_foreman_v1alpha1_telehandler_proto_depIdxs = nil
}
