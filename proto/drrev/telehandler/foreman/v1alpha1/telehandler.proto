// TODO: Follow Google AIP standards:
// - Add resource types: https://google.aip.dev/123.
// - Add google.api.FieldBehavior annotations to fields: https://google.aip.dev/203.
// - Add http annotations: https://google.aip.dev/127.
syntax = "proto3";

package drrev.telehandler.foreman.v1alpha1;

import "google/protobuf/empty.proto";

option go_package = "github.com/drrev/telehandler/gen/drrev/telehandler/foreman/v1alpha1;foremanpb";

// The Foreman service manages all jobs within the system.
// This service is used to start, stop, query status, and get the output of a job.
service Foreman {
  // Starts and starts a job under the given parent resource.
  rpc StartJob(StartJobRequest) returns (JobResponse) {}
  // Stops a job.
  rpc StopJob(StopJobRequest) returns (google.protobuf.Empty) {}
  // Retrieves the current status of a given Job.
  rpc GetJobStatus(GetJobStatusRequest) returns (JobStatus) {}
  // Watches the output for a given job. This method does not support cursors or pagination.
  // Each new request to WatchJob will return **all** events since the start of the process.
  // At this time, only log events are supported.
  rpc WatchJobOutput(WatchJobOutputRequest) returns (stream LogMessage) {}
}

// A request to start a new Linux process.
//
// If the operation failed, the following well-defined errors are returned:
//   - PERMISSION_DENIED: The requesting user does not have permission to start a new job.
//   - FAILED_PRECONDITION: Execution of the command was attempted, but the command failed to start.
message StartJobRequest {
  // Required. The parent resource that owns the Job.
  //
  // Format: users/{user_id}
  //
  // Example: users/7307c303-b7c8-4b75-ad5b-25fecf8cb781
  //
  // See also: https://google.aip.dev/122
  //
  // TODO: Add/validate parent resource. Removed to simplify the design for prototyping.
  // string parent = 1;

  // Required. The Linux command to run on the target system.
  string command = 2;

  // Optional. Arguments to pass to the command.
  repeated string args = 3;

  // Optional. Environment to pass to the command.
  map<string, string> env = 4;
}

// A request to stop a Job.
message StopJobRequest {
  // Required. The resource name of the job to stop.
  //
  // ~~Format: users/{user_id}/jobs/{uid}~~
  //
  // ~~Example: users/7307c303-b7c8-4b75-ad5b-25fecf8cb781/jobs/2259116c-578e-413c-93bd-d6855dfcb941~~
  //
  // Format: jobs/{uid}
  //
  // Example: jobs/2259116c-578e-413c-93bd-d6855dfcb941
  string name = 1;
}

// A request to resolve the latest status of the job,
// including the current state and resource utilization.
message GetJobStatusRequest {
  // Required. The resource name of the job to stop.
  //
  // ~~Format: users/{user_id}/jobs/{uid}~~
  //
  // ~~Example: users/7307c303-b7c8-4b75-ad5b-25fecf8cb781/jobs/2259116c-578e-413c-93bd-d6855dfcb941~~
  //
  // Format: jobs/{uid}
  //
  // Example: jobs/2259116c-578e-413c-93bd-d6855dfcb941
  string name = 1;
}

// A request to watch streaming output from a target job.
message WatchJobOutputRequest {
  // Required. The resource name of the job to stop.
  //
  // ~~Format: users/{user_id}/jobs/{uid}~~
  //
  // ~~Example: users/7307c303-b7c8-4b75-ad5b-25fecf8cb781/jobs/2259116c-578e-413c-93bd-d6855dfcb941~~
  //
  // Format: jobs/{uid}
  //
  // Example: jobs/2259116c-578e-413c-93bd-d6855dfcb941
  string name = 1;
}

// A LogMessage reprents a single line of output from a given job.
//
// All lines from STDOUT and STDERR are multiplexed into a single stream.
message LogMessage {
  // Output only. The resource name of the associated job.
  string parent = 1;
  // Output only. The raw log line output from the process.
  bytes line = 2;
}

// The current state of a Job in the execution lifecycle.
enum JobState {
  // The state of the job is not specified.
  JOB_STATE_UNSPECIFIED = 0;
  // The job is currently running and active.
  JOB_STATE_RUNNING = 1;
  // The job failed during execution.
  // If a job is in this state, request the job output with TailJobOutput to discern the cause of failure.
  JOB_STATE_FAILED = 2;
  // The job ran to completion and exited successfully.
  // When in this state, job output can still be requested via TailJobOutput.
  JOB_STATE_COMPLETED = 3;
}

// The full context of a Linux process execution.
message JobResponse {
  // Output only. The resource name of this job.
  // This name is required when performing any operations targeting this Job.
  //
  // ~~Format: users/{user_id}/jobs/{uid}~~
  //
  // ~~Example: users/7307c303-b7c8-4b75-ad5b-25fecf8cb781/jobs/2259116c-578e-413c-93bd-d6855dfcb941~~
  //
  // Format: jobs/{uid}
  //
  // Example: jobs/2259116c-578e-413c-93bd-d6855dfcb941
  //
  // See also: https://google.aip.dev/122
  string name = 1;
  // Output only. A system-assigned UUIDv4 unique identifier for this Job.
  string uid = 2;
  // Output only. The current state of the job.
  JobState state = 3;
}

// A single value from a cgroup v2 stat file.
//
// Example: The io.stat line "8:16 rbytes=1459200 wbytes=314773504 rios=192 wios=353" becomes
//   	  StatValue{kind=KIND_IO, value="8:16 rbytes=1459200 wbytes=314773504 rios=192 wios=353"}}
//
// See also: https://www.kernel.org/doc/Documentation/cgroup-v2.txt
//
// TODO: Replace StatValue with real metrics from https://pkg.go.dev/go.opentelemetry.io/otel/metric.
// Actively parting KV from CPU/Memory and table format from IO was deemed out of scope for this prototype.
message StatValue {
  // Resource of cgroup stat.
  enum Resource {
    // Stat value kind is unknown. NOT USED.
    RESOURCE_UNSPECIFIED = 0;
    // CPU stat.
    RESOURCE_CPU = 1;
    // Memory stat.
    RESOURCE_MEMORY = 2;
    // IO stat.
    RESOURCE_IO = 3;
  }

  // The resource that generated the stat.
  Resource resource = 1;
  // The raw stat line.
  string value = 2;
}

// The current status of a given job.
message JobStatus {
  // Output only. The resource name of the associated job.
  //
  // ~~Format: users/{user_id}/jobs/{uid}~~
  //
  // ~~Example: users/7307c303-b7c8-4b75-ad5b-25fecf8cb781/jobs/2259116c-578e-413c-93bd-d6855dfcb941~~
  //
  // Format: jobs/{uid}
  //
  // Example: jobs/2259116c-578e-413c-93bd-d6855dfcb941
  string parent = 1;
  // Output only. The current state of the job.
  JobState state = 2;
  // Output only. A set of resource utilization stats.
  repeated StatValue stats = 4;
}
